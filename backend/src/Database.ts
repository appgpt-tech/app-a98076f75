//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { TransactionsEntity } from './db/Transactions.entity';
import { PaymentMethodsEntity } from './db/PaymentMethods.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      TransactionsEntity,
      PaymentMethodsEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          email: 'email 1',
          phoneNumber: 'phoneNumber 1',
          subscriptionStatus: true,
          registrationDate: '2024-04-30T11:30:38.806Z',
          password: 'password 1',
          id: 3,
        },
        {
          email: 'email 2',
          phoneNumber: 'phoneNumber 2',
          subscriptionStatus: true,
          registrationDate: '2024-03-24T22:05:28.479Z',
          password: 'password 2',
          id: 78,
        },
        {
          email: 'email 3',
          phoneNumber: 'phoneNumber 3',
          subscriptionStatus: false,
          registrationDate: '2024-12-07T10:42:24.690Z',
          password: 'password 3',
          id: 22,
        },
        {
          email: 'email 4',
          phoneNumber: 'phoneNumber 4',
          subscriptionStatus: false,
          registrationDate: '2024-09-16T06:38:04.989Z',
          password: 'password 4',
          id: 9,
        },
        {
          email: 'email 5',
          phoneNumber: 'phoneNumber 5',
          subscriptionStatus: true,
          registrationDate: '2024-06-23T16:08:19.023Z',
          password: 'password 5',
          id: 35,
        },
      ],
      Transactions: [
        {
          amount: 0.05,
          sender: 1,
          receiver: 1,
          transactionDate: '2024-05-26T19:58:27.294Z',
          paymentMethod: 1,
          id: 14,
        },
        {
          amount: 0.32,
          sender: 2,
          receiver: 2,
          transactionDate: '2024-07-16T18:25:44.551Z',
          paymentMethod: 2,
          id: 34,
        },
        {
          amount: 0.33,
          sender: 3,
          receiver: 3,
          transactionDate: '2023-07-29T20:55:43.515Z',
          paymentMethod: 3,
          id: 23,
        },
        {
          amount: 0.97,
          sender: 4,
          receiver: 4,
          transactionDate: '2025-04-01T22:57:46.027Z',
          paymentMethod: 4,
          id: 28,
        },
        {
          amount: 0.56,
          sender: 5,
          receiver: 5,
          transactionDate: '2024-11-03T23:12:59.802Z',
          paymentMethod: 5,
          id: 59,
        },
      ],
      PaymentMethods: [
        {
          methodName: 'methodName 1',
          accountDetails: 'accountDetails 1',
          id: 15,
        },
        {
          methodName: 'methodName 2',
          accountDetails: 'accountDetails 2',
          id: 70,
        },
        {
          methodName: 'methodName 3',
          accountDetails: 'accountDetails 3',
          id: 53,
        },
        {
          methodName: 'methodName 4',
          accountDetails: 'accountDetails 4',
          id: 26,
        },
        {
          methodName: 'methodName 5',
          accountDetails: 'accountDetails 5',
          id: 4,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('TransactionsEntity', data.Transactions);
      await this.SeedResource('PaymentMethodsEntity', data.PaymentMethods);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
